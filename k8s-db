To create a Spring Boot frontend that consumes your Kubernetes API, you'll need to build a web application that makes HTTP requests to your k8s cluster. Here's how to structure it:

## Project Setup

**Dependencies in `pom.xml`:**
```xml
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
    </dependency>
</dependencies>
```

## Backend Structure

**1. Configuration Class:**
```java
@Configuration
public class KubernetesConfig {
    
    @Value("${kubernetes.api.url:http://localhost:58210}")
    private String kubernetesApiUrl;
    
    @Value("${kubernetes.token:}")
    private String token;
    
    @Bean
    public WebClient webClient() {
        WebClient.Builder builder = WebClient.builder()
            .baseUrl(kubernetesApiUrl)
            .defaultHeader("Content-Type", "application/json");
            
        if (!token.isEmpty()) {
            builder.defaultHeader("Authorization", "Bearer " + token);
        }
        
        return builder.build();
    }
}
```

**2. Service Layer:**
```java
@Service
public class KubernetesService {
    
    private final WebClient webClient;
    
    public KubernetesService(WebClient webClient) {
        this.webClient = webClient;
    }
    
    public Mono<String> listPods(String namespace) {
        return webClient.get()
            .uri("/api/v1/namespaces/{namespace}/pods", namespace)
            .retrieve()
            .bodyToMono(String.class);
    }
    
    public Mono<String> listVirtualServices(String namespace) {
        return webClient.get()
            .uri("/apis/networking.istio.io/v1beta1/namespaces/{namespace}/virtualservices", namespace)
            .retrieve()
            .bodyToMono(String.class);
    }
    
    public Mono<String> getPodLogs(String namespace, String podName, String containerName) {
        String uri = containerName != null ? 
            "/api/v1/namespaces/{namespace}/pods/{podName}/log?container={container}" :
            "/api/v1/namespaces/{namespace}/pods/{podName}/log";
            
        return webClient.get()
            .uri(uri, namespace, podName, containerName)
            .retrieve()
            .bodyToMono(String.class);
    }
}
```

**3. Controller:**
```java
@Controller
public class KubernetesController {
    
    private final KubernetesService kubernetesService;
    
    public KubernetesController(KubernetesService kubernetesService) {
        this.kubernetesService = kubernetesService;
    }
    
    @GetMapping("/")
    public String index() {
        return "index";
    }
    
    @GetMapping("/api/pods/{namespace}")
    @ResponseBody
    public Mono<String> getPods(@PathVariable String namespace) {
        return kubernetesService.listPods(namespace);
    }
    
    @GetMapping("/api/virtualservices/{namespace}")
    @ResponseBody
    public Mono<String> getVirtualServices(@PathVariable String namespace) {
        return kubernetesService.listVirtualServices(namespace);
    }
    
    @GetMapping("/api/logs/{namespace}/{podName}")
    @ResponseBody
    public Mono<String> getLogs(@PathVariable String namespace, 
                               @PathVariable String podName,
                               @RequestParam(required = false) String container) {
        return kubernetesService.getPodLogs(namespace, podName, container);
    }
}
```

## Frontend (Thymeleaf + JavaScript)

**templates/index.html:**
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Kubernetes Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-4">
        <h1>Kubernetes Dashboard</h1>
        
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>Pods</h5>
                    </div>
                    <div class="card-body">
                        <button class="btn btn-primary" onclick="loadPods()">Load Pods</button>
                        <div id="pods-content" class="mt-3"></div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>Virtual Services</h5>
                    </div>
                    <div class="card-body">
                        <button class="btn btn-primary" onclick="loadVirtualServices()">Load Virtual Services</button>
                        <div id="vs-content" class="mt-3"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>Pod Logs</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <input type="text" id="podName" class="form-control" placeholder="Pod Name">
                            <input type="text" id="containerName" class="form-control mt-2" placeholder="Container Name (optional)">
                            <button class="btn btn-primary mt-2" onclick="loadLogs()">Load Logs</button>
                        </div>
                        <pre id="logs-content" class="bg-dark text-light p-3" style="height: 400px; overflow-y: auto;"></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const namespace = 'ns-asuwsjj-int';
        
        async function loadPods() {
            try {
                const response = await fetch(`/api/pods/${namespace}`);
                const data = await response.json();
                const pods = data.items || [];
                
                let html = '<ul class="list-group">';
                pods.forEach(pod => {
                    html += `<li class="list-group-item">
                        <strong>${pod.metadata.name}</strong>
                        <span class="badge bg-secondary">${pod.status.phase}</span>
                    </li>`;
                });
                html += '</ul>';
                
                document.getElementById('pods-content').innerHTML = html;
            } catch (error) {
                console.error('Error loading pods:', error);
            }
        }
        
        async function loadVirtualServices() {
            try {
                const response = await fetch(`/api/virtualservices/${namespace}`);
                const data = await response.json();
                const virtualServices = data.items || [];
                
                let html = '<ul class="list-group">';
                virtualServices.forEach(vs => {
                    html += `<li class="list-group-item">
                        <strong>${vs.metadata.name}</strong>
                    </li>`;
                });
                html += '</ul>';
                
                document.getElementById('vs-content').innerHTML = html;
            } catch (error) {
                console.error('Error loading virtual services:', error);
            }
        }
        
        async function loadLogs() {
            const podName = document.getElementById('podName').value;
            const containerName = document.getElementById('containerName').value;
            
            if (!podName) {
                alert('Please enter a pod name');
                return;
            }
            
            try {
                let url = `/api/logs/${namespace}/${podName}`;
                if (containerName) {
                    url += `?container=${containerName}`;
                }
                
                const response = await fetch(url);
                const logs = await response.text();
                
                document.getElementById('logs-content').textContent = logs;
            } catch (error) {
                console.error('Error loading logs:', error);
            }
        }
    </script>
</body>
</html>
```

## Configuration

**application.yml:**
```yaml
kubernetes:
  api:
    url: http://localhost:58210
    token: ${KUBERNETES_TOKEN:}

server:
  port: 8080
```

This setup gives you a web interface to interact with your Kubernetes cluster. You can extend it by adding more endpoints, better error handling, real-time updates with WebSockets, or a more sophisticated UI framework like React or Vue.js.